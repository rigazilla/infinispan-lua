# Multi-platform native library build and publish workflow
#
# This workflow builds LuaJava native libraries for multiple platforms (Linux, Windows, macOS, iOS),
# runs tests across different OS versions, packages the artifacts, and publishes to Maven Central.
#
# Workflow structure:
# 1. most-natives: Builds Linux (x86, x86_64, ARM, ARM64) and Windows (x86, x86_64, ARM64) natives
# 2. apple-natives: Builds macOS (x86_64, ARM64) and iOS natives
# 3. linux-testing & windows-testing: Tests natives on different OS versions
# 4. pack-and-publish-natives: Packages all natives and publishes to Maven Central
#
# Triggered by:
# - Completion of "Create Source Artifact" workflow
# - Manual dispatch with run-id parameter (unofficial feature)

name: Docker Build and Publish

on:
  workflow_run:
    workflows: [Create Source Artifact]
    types: [completed]
  workflow_dispatch:
    inputs:
      run-id:
        description: "The run ID of the workflow run that uploaded the luajava-folder artifact."
        required: true
        type: string

jobs:
  # Job 1: Build native libraries for Linux and Windows platforms
  # Builds: Linux (x86, x86_64, ARM, ARM64) and Windows (x86, x86_64, ARM64)
  # Uses cross-compilation toolchains and LLVM-MinGW for Windows builds
  most-natives:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      env:
        DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install basic dependencies
        run: |
          apt-get update
          apt-get install -y curl wget git build-essential software-properties-common
          apt-get install -y ca-certificates gnupg lsb-release
          apt-get install -y ant unzip

      - name: Download luajava folder artifact
        uses: actions/download-artifact@v4
        with:
          name: luajava-folder
          path: luajava
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run-id || github.event.workflow_run.id }}

      - name: Set version from artifact
        run: |
          if [ -f luajava/version.txt ]; then
            echo "VERSION=$(cat luajava/version.txt)" >> $GITHUB_ENV
          fi
          if [ -f luajava/maven-group-id.txt ]; then
            echo "MAVEN_GROUP_ID=$(cat luajava/maven-group-id.txt)" >> $GITHUB_ENV
          fi

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
      - run: echo "JAVA_8=$JAVA_HOME" >> $GITHUB_ENV
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - run: echo "JAVA_17=$JAVA_HOME" >> $GITHUB_ENV
      
      - name: Download llvm-mingw
        uses: robinraju/release-downloader@v1.10
        with:
          repository: 'mstorsjo/llvm-mingw'
          tag: 20240619
          fileName: llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz
          tarBall: false
          zipBall: false
          
      - name: Set up llvm-mingw
        run: |
          mkdir -p /usr/local
          tar -Jxf llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz -C /usr/local
          echo "/usr/local/llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/bin" >> $GITHUB_PATH
          
      - name: Install cross-compilation toolchains
        run: |
          apt update
          # x86_64
          apt install -y --force-yes gcc g++
          apt install -y --force-yes libc6-dev linux-libc-dev linux-libc-dev-amd64-cross
          # x86
          apt install -y --force-yes gcc-i686-linux-gnu g++-i686-linux-gnu
          apt install -y --force-yes lib32stdc++-9-dev libstdc++-9-dev-i386-cross
          apt install -y --force-yes libc6-dev-i386 libc6-dev-i386-cross linux-libc-dev-i386-cross
          apt install -y g++-multilib
          # arm64
          apt install -y --force-yes gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
          apt install -y --force-yes libstdc++-9-dev-arm64-cross linux-libc-dev-arm64-cross
          # armhf
          apt install -y --force-yes gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross
          apt install -y --force-yes libstdc++-9-dev-armhf-cross linux-libc-dev-armhf-cross
          # TODO: riscv64
          # Windows
          apt install -y --force-yes mingw-w64 lib32z1
          
      - name: Install additional dependencies for PatchELF
        run: |
          apt install -y autoconf automake libtool make
          
      - name: Install PatchELF (verneed-fix)
        run: |
          git clone https://github.com/gudzpoz/patchelf.git
          cd patchelf
          git checkout 1684a4606be1fef189d04a465adc0c9d31421dac
          ./bootstrap.sh
          ./configure
          make
          make check
          `pwd`/src/patchelf --version
          echo "`pwd`/src" >> $GITHUB_PATH

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        
      - name: Build natives
        run: |
          cd luajava
          chmod +x gradlew
          echo $PATH
          which aarch64-w64-mingw32-gcc || echo "not found"
          ls /usr/local/llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/bin
          ./gradlew --info --stacktrace jniGen jnigenBuildLinux jnigenBuildLinux64
          ./gradlew jniGen jnigenBuildLinuxARM jnigenBuildLinuxARM64
          # TODO: ./gradlew jniGen jnigenBuildLinuxRISCV64
          ./gradlew jniGen jnigenBuildWindows jnigenBuildWindows64 jnigenBuildWindowsARM64 # skip jnigenBuildAndroid
          
      - name: Test (Desktop)
        run: |
          cd luajava
          ./gradlew --info --stacktrace :example:test :jsr223:test :jpms-example:run
          
      - name: Jacoco Test Report
        run: |
          cd luajava
          ./gradlew jacocoTestReport
          
      - name: Upload test result
        uses: codecov/codecov-action@v4
        with:
          files: >-
            ./luajava/lua51/build/reports/jacoco/report.xml,
            ./luajava/lua52/build/reports/jacoco/report.xml,
            ./luajava/lua53/build/reports/jacoco/report.xml,
            ./luajava/lua54/build/reports/jacoco/report.xml,
            ./luajava/luajit/build/reports/jacoco/report.xml,
            ./luajava/luaj/build/reports/jacoco/report.xml,
            ./luajava/luajava/build/reports/jacoco/report.xml,
            ./luajava/jsr223/build/reports/jacoco/report.xml
          verbose: true
          
      - name: Upload all output libs
        uses: actions/upload-artifact@v4
        with:
          name: most-natives
          path: |
            ./luajava/*/libs
            ./luajava/**/*.jar
          retention-days: 5

  # Job 2: Build native libraries for Apple platforms
  # Builds: macOS (x86_64, ARM64) and iOS
  apple-natives:
    runs-on: macos-13
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.10"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - run: echo "JAVA_17=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Download luajava folder artifact
        uses: actions/download-artifact@v4
        with:
          name: luajava-folder
          path: luajava
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run-id || github.event.workflow_run.id }}
      - name: Set version from artifact
        run: |
          if [ -f luajava/version.txt ]; then
            echo "VERSION=$(cat luajava/version.txt)" >> $GITHUB_ENV
          fi
          if [ -f luajava/maven-group-id.txt ]; then
            echo "MAVEN_GROUP_ID=$(cat luajava/maven-group-id.txt)" >> $GITHUB_ENV
          fi
      - name: Build natives
        run: |
          cd luajava
          chmod +x gradlew
          ./gradlew jniGen jnigenBuildMacOsX64 jnigenBuildMacOsXARM64 jnigenBuildIOS
      - name: Test
        run: |
          cd luajava
          chmod +x gradlew
          ./gradlew :example:test :jsr223:test :jpms-example:run
      - name: Upload macOS natives
        uses: actions/upload-artifact@v4
        with:
          name: apple-natives
          path: ./luajava/*/libs
          retention-days: 5

  # Job 3: Test Linux natives on different glibc/musl versions
  # Tests the built natives on Ubuntu 14.04 (glibc) and Alpine (musl)
  linux-testing:
    runs-on: ubuntu-latest
    needs:
      - most-natives
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
      - run: echo "JAVA_8=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
      - run: echo "JAVA_11=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Download most-natives artifact
        uses: actions/download-artifact@v4
        with:
          name: most-natives
          path: luajava
      - name: Download luajava folder artifact
        uses: actions/download-artifact@v4
        with:
          name: luajava-folder
          path: luajava
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run-id || github.event.workflow_run.id }}
      - name: Set version from artifact
        run: |
          if [ -f luajava/version.txt ]; then
            echo "VERSION=$(cat luajava/version.txt)" >> $GITHUB_ENV
          fi
          if [ -f luajava/maven-group-id.txt ]; then
            echo "MAVEN_GROUP_ID=$(cat luajava/maven-group-id.txt)" >> $GITHUB_ENV
          fi
      - name: JniGen
        run: |
          cd luajava
          chmod +x gradlew
          ./gradlew jniGen
      - name: Build example
        run: |
          cd luajava
          chmod +x gradlew
          ./gradlew :example:shadowJar
      - name: Test on Ubuntu 14.04
        run: |
          cd luajava
          chmod +x gradlew
          sudo docker build -t ljtest-glibc -f example/docker/glibc/Dockerfile example/build/libs
          sudo docker run --rm ljtest-glibc
      - name: Test on Alpine
        run: |
          cd luajava
          chmod +x gradlew
          sudo docker build -t ljtest-musl -f example/docker/musl/Dockerfile example/build/libs
          sudo docker run --rm ljtest-musl

  # Job 4: Test Windows natives
  # Validates the Windows builds work correctly
  windows-testing:
    runs-on: windows-latest
    needs:
      - most-natives
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
      - run: echo "JAVA_8=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
      - run: echo "JAVA_11=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Download most-natives artifact
        uses: actions/download-artifact@v4
        with:
          name: most-natives
          path: luajava
      - name: Download luajava folder artifact
        uses: actions/download-artifact@v4
        with:
          name: luajava-folder
          path: luajava
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run-id || github.event.workflow_run.id }}
      - name: Set version from artifact
        shell: pwsh
        run: |
          if (Test-Path luajava/version.txt) {
            $version = Get-Content luajava/version.txt
            echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          if (Test-Path luajava/maven-group-id.txt) {
            $groupId = Get-Content luajava/maven-group-id.txt
            echo "MAVEN_GROUP_ID=$groupId" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
      - name: JniGen
        run: |
          cd luajava
          chmod +x gradlew
          ./gradlew jniGen
      - name: Test
        run: |
          cd luajava
          chmod +x gradlew
          ./gradlew --info --stacktrace :example:test :jsr223:test :jpms-example:run

  # Job 5: Package all natives and publish to Maven Central
  # Combines all platform natives, signs them, and publishes:
  # - SNAPSHOT versions to Sonatype Central snapshot repository
  # - Release versions via Sonatype Portal API
  pack-and-publish-natives:
    needs:
      - apple-natives
      - most-natives
      - windows-testing
      - linux-testing
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
      - run: echo "JAVA_8=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
      - run: echo "JAVA_11=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Download apple-natives artifact
        uses: actions/download-artifact@v4
        with:
          name: apple-natives
          path: luajava
      - name: Download most-natives artifact
        uses: actions/download-artifact@v4
        with:
          name: most-natives
          path: luajava
      - name: Download luajava folder artifact
        uses: actions/download-artifact@v4
        with:
          name: luajava-folder
          path: luajava
          github-token: ${{ github.token }}
          run-id: ${{ inputs.run-id || github.event.workflow_run.id }}
      - name: Set version from artifact
        run: |
          if [ -f luajava/version.txt ]; then
            echo "VERSION=$(cat luajava/version.txt)" >> $GITHUB_ENV
          fi
          if [ -f luajava/maven-group-id.txt ]; then
            echo "MAVEN_GROUP_ID=$(cat luajava/maven-group-id.txt)" >> $GITHUB_ENV
          fi
      - name: JniGen
        run: |
          cd luajava
          chmod +x gradlew
          ./gradlew jniGen
      - name: Pack desktop natives
        run: |
          cd luajava
          chmod +x gradlew
          ant -f lua51/jni/build.xml pack-natives
          ant -f lua52/jni/build.xml pack-natives
          ant -f lua53/jni/build.xml pack-natives
          ant -f lua54/jni/build.xml pack-natives
          ant -f luajit/jni/build.xml pack-natives
      - name: Build
        run: |
          cd luajava
          chmod +x gradlew
          ./gradlew build -x test
      - name: Build platform sources JAR
        run: |
          cd luajava
          ./gradlew :lua51:platformSourcesJar
      - name: Publish to local Maven repository
        env:
          GPG_SECKEY: ${{ secrets.INFINISPAN_MAVEN_GPG_ARMORED }}
          GPG_PASSPHRASE: ${{ secrets.INFINISPAN_MAVEN_GPG_PASSPHRASE }}
        run: |
          cd luajava
          ./gradlew :lua51:publishMavenPlatformPublicationToMavenLocal -PpublishOnlyDesktop=true
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: natives
          path: ./luajava/**/build/libs/*-natives-desktop.jar
      - name: Publish to Central Sonatype (for SNAPSHOT)
        # Artifacts will be available at "https://central.sonatype.com/repository/maven-snapshots/"
        if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && endsWith(env.VERSION, '-SNAPSHOT') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.SONATYPE_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_CENTRAL_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.INFINISPAN_MAVEN_GPG_PASSPHRASE }}
          GPG_SECKEY: ${{ secrets.INFINISPAN_MAVEN_GPG_ARMORED }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          cd luajava
          ./gradlew :lua51:publishMavenPlatformPublicationToOSSRHRepository -PpublishOnlyDesktop=true --info --stacktrace -Dorg.gradle.parallel=false
      - name: Publish with Sonatype Portal API (for Release)
        if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && !endsWith(env.VERSION, '-SNAPSHOT') }}
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_CENTRAL_PASSWORD }}
        run: |
          # Create base64 token securely without exposing credentials in logs
          TOKEN=$(printf '%s:%s' "${MAVEN_USERNAME}" "${MAVEN_PASSWORD}" | base64 -w 0)
          # Convert group ID to path (e.g., org.infinispan -> org/infinispan)
          GROUP_PATH=$(echo ${MAVEN_GROUP_ID} | tr '.' '/')
          # Add md5 sign
          cd $HOME/.m2/repository/${GROUP_PATH}/infinispan-lua51-platform/${VERSION}
          for f in *.pom *.jar; do
            [ -f "$f" ] || continue       # Skip if no match
            md5sum "$f" | awk '{print $1}' > "$f.md5"
          done
          for f in *.pom *.jar; do
            [ -f "$f" ] || continue       # Skip if no match
            sha1sum "$f" | awk '{print $1}' > "$f.sha1"
          done
          cd $HOME/.m2/repository
          zip -r bundle.zip ${GROUP_PATH}/infinispan-lua51-platform/${VERSION} -x "*.xml"
          curl --request POST \
               --verbose \
               --header "Authorization: Bearer ${TOKEN}" \
               --form bundle=@bundle.zip \
               https://central.sonatype.com/api/v1/publisher/upload