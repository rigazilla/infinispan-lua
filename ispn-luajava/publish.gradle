configure([
        project(':luajava'),
        project(':lua51'),
        project(':lua52'),
        project(':lua53'),
        project(':lua54'),
        project(':luajit'),
        project(':luaj'),
        project(':jsr223')
]) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    apply from: project(':').file('javadoc.gradle')
    apply from: project(':').file('pom.gradle')

    java {
        withSourcesJar()
        withJavadocJar()
    }

    afterEvaluate { project ->
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            //noinspection GroovyImplicitNullArgumentCall
                            fromResolutionResult()
                        }
                    }

                    setPom(pom, '')
                }

                if (project.tasks.findByName('jnigen')) {
                    mavenPlatform(MavenPublication) {
                        artifactId = 'infinispan-' + artifactId + '-platform'

                        def publishOnlyDesktop = project.hasProperty('publishOnlyDesktop') && project.property('publishOnlyDesktop') == 'true'

                        if (project.tasks.findByName('jnigenJarNativesDesktop')) {
                            artifact jnigenJarNativesDesktop {}
                        }
                        if (!publishOnlyDesktop && project.tasks.findByName('jnigenJarNativesIOS')) {
                            artifact jnigenJarNativesIOS {}
                        }
                        if (!publishOnlyDesktop) {
                            // TODO: Add riscv64 to the list once Android NDK & jnigen supports RISC-V Android builds.
                            ['arm64-v8a', 'armeabi-v7a', 'x86_64', 'x86'].each { arch ->
                                if (project.tasks.findByName("jnigenJarNativesAndroid$arch")) {
                                    artifact "jnigenJarNativesAndroid$arch" {}
                                }
                            }
                        }

                        // Include sources JAR for platform publication
                        if (project.tasks.findByName('platformSourcesJar')) {
                            artifact platformSourcesJar {
                                classifier = 'sources'
                            }
                        }

                        setPom(pom, ' Native Libraries')

                        pom.packaging = 'jar'
                    }
                }
            }

            repositories {
                maven {
                    name = 'OSSRH'
                    def releasesRepoUrl = 'https://central.sonatype.com/repository/maven-releases/'
                    def snapshotsRepoUrl = 'https://central.sonatype.com/repository/maven-snapshots/'
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username = System.getenv('MAVEN_USERNAME') ?: ''
                        password = System.getenv('MAVEN_PASSWORD') ?: ''
                    }
                }
            }
        }

        signing {
            required { !project.hasProperty('skipSigning') }
            useInMemoryPgpKeys(
                    System.getenv("GPG_SECKEY"),
                    System.getenv("GPG_PASSPHRASE"),
            )
            sign publishing.publications.mavenJava

            if (project.tasks.findByName('jnigen')) {
                sign publishing.publications.mavenPlatform
            }
        }
    }
}
