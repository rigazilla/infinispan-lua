buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.badlogicgames.gdx:gdx-jnigen-gradle:2.5.2'
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.28.0'
    }
}

plugins {
    id 'java'
    id 'java-library'
}

apply plugin: 'com.vanniktech.maven.publish'

import com.vanniktech.maven.publish.SonatypeHost

repositories {
    mavenCentral()
}

group = System.getenv('POM_GROUP') ?: 'org.infinispan'
version = rootProject.version

configurations {
    desktopNatives {
        canBeConsumed = true
        canBeResolved = false
    }

    instrumentedJars {
        canBeConsumed = true
        canBeResolved = false
        extendsFrom api, implementation, runtimeOnly
    }
}

dependencies {
    api project(':luajava')
}

apply plugin: 'com.badlogicgames.gdx.gdx-jnigen'

jnigen {
    sharedLibName = 'lua51'

    all {
        headerDirs = ['../../jni/luajava', 'mod', 'lua51/src', 'lua51/etc']
        cppExcludes = ['lua51/**/*']
        cExcludes = ['lua51/**/*']
        libraries = ' -lm '
    }

    add(Windows, x32)
    add(Windows, x64)
    add(Windows, x64, ARM)

    add(Linux, x32)
    add(Linux, x64)
    add(Linux, x32, ARM)
    add(Linux, x64, ARM)
    // TODO: Until we have a RISCV toolchain on Ubuntu.
    // add(Linux, x64, RISCV)
    each({ it.os == Linux }) {
        String linuxFlags = ' -D_FORTIFY_SOURCE=0 -DLUA_USE_DLOPEN '
        cFlags += linuxFlags
        cppFlags += linuxFlags
    }

    add(MacOsX, x64)
    add(MacOsX, x64, ARM)
    each({ it.os == MacOsX }) {
        String macFlags = ' -DLUA_USE_DLOPEN '
        libraries = ''
        cFlags += macFlags
        cppFlags += macFlags
    }

    robovm {
        forceLinkClasses "java.lang.Class", "java.lang.Throwable", "party.iroiro.luajava.JuaAPI"
    }
    add(IOS, x64) {
        libraries = ''
        xcframeworkBundleIdentifier = "party.iroiro.luajava.lua51"
        minIOSVersion = "11.0"
    }
}

artifacts {
    instrumentedJars(jar)
    desktopNatives(jnigenJarNativesDesktop)
}

tasks.named('jar') {
    manifest {
        attributes('Automatic-Module-Name': 'party.iroiro.luajava.lua51')
    }
}

tasks.withType(Jar).configureEach {
    archiveBaseName = 'infinispan-lua51-platform'
}


tasks.jnigen.dependsOn(tasks.build)

apply plugin: 'maven-publish'

publishing {
    publications {
        mavenPlatform(MavenPublication) {
            artifactId = 'infinispan-lua51-platform'
            groupId = group
            version = version.toString()

            def publishOnlyDesktop = project.hasProperty('publishOnlyDesktop') && project.property('publishOnlyDesktop') == 'true'

            if (project.tasks.findByName('jnigenJarNativesDesktop')) {
                artifact jnigenJarNativesDesktop {}
            }

            pom {
                name = System.getenv('POM_NAME') ?: 'Infinispan Lua 5.1 Platform'
                description = System.getenv('POM_DESCRIPTION') ?: 'Infinispan Natives Lua 5.1'
                url = System.getenv('POM_URL') ?: 'https://github.com/infinispan/infinispan-lua'

                licenses {
                    license {
                        name = System.getenv('POM_LICENCE_NAME') ?: 'The MIT License'
                        url = System.getenv('POM_LICENCE_URL') ?: 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = System.getenv('POM_LICENCE_DIST') ?: 'repo'
                    }
                }

                developers {
                    developer {
                        id = System.getenv('POM_DEV_ID') ?: 'infinispan'
                        name = System.getenv('POM_DEV_NAME') ?: 'Infinispan Team'
                        email = System.getenv('POM_DEV_EMAIL') ?: 'vittorio@infinispan.org'
                        url = System.getenv('POM_DEV_URL') ?: 'https://github.com/infinispan'
                    }
                }

                scm {
                    connection = System.getenv('POM_SCM_CONNECTION') ?: 'scm:git:git://github.com/infinispan/infinispan-lua.git'
                    developerConnection = System.getenv('POM_SCM_DEV_CONNECTION') ?: 'scm:git:git://github.com/infinispan/infinispan-lua.git'
                    url = System.getenv('POM_SCM_URL') ?: 'https://github.com/infinispan/infinispan-lua.git'
                }
            }
        }
    }
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.S01)

}
